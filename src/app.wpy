<style lang="less">
@import 'theme.less';
@import 'ipx.less';
@import 'app.less';
@import 'buttons.less';
@import 'font.less';
</style>

<script>
import wepy from 'wepy';
import 'wepy-async-function';

import { setStore } from 'wepy-redux';
import configStore from './store';

// console.log(MdTabs);
const store = configStore();
setStore(store);

var _serverRoot = 'https://ellist.cn/wmtan/client';
var websocket = _serverRoot.startsWith('https')
  ? _serverRoot.replace('https', 'wss')
  : _serverRoot.replace('http', 'ws');

export default class extends wepy.app {
  config = {
    pages: [
      'pages/eventsRemote',
      'pages/preload',
      'pages/eventsWmt',
      'pages/events',
      'pages/liveChat',
      'pages/shake',
      // 'pages/login',
      // 'pages/index',
      // 'pages/block',
      // 'pages/checkin',
      // 'pages/album',
      // 'pages/register',
      // 'pages/main',
      // 'pages/admin',
      // 'pages/refill',
      // 'pages/welcome',
      // 'pages/result',
      // 'pages/bulletMessage',
      // 'pages/transfer',
      // // 'pages/index2',
      // // 'pages/index3',
      // 'pages/qrcode',
      // 'pages/transferSuccess',
      // 'pages/transactionHistory'
    ],
    window: {
      backgroundTextStyle: 'light',
      backgroundColor: '#7a2c2d',
      navigationBarBackgroundColor: '#fd8023',
      navigationBarTitleText: 'Walmart 2020',
      navigationBarTextStyle: 'white'
    }
  };

  globalData = {
    lang: 0,
    CacheName_Date: 'cache*&^Date',
    CacheName_App: 'cache*&^App',
    CacheName_HideHelp: 'cache*&^HideHelp',
    CacheName_HideHelpCheckIn: 'cache*&^HideHelpCheckIn',
    CacheName_UserInfo: 'user*&^Info',
    isAdmin: false,
    model: '',
    config: {},
    userInfo: null,
    user: {
      balance: 9
    },
    isIpx: false,
    isDebug: true,
    qrCodeUrl: 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=',
    baseurlTransaction: 'https://wtf.chinacloudsites.cn/',
    eventId: 12345
  };

  constructor() {
    super();
    this.use('requestfix');
  }

  getCacheUser(name) {
    let cacheUser =
      wepy.getStorageSync(this.globalData.CacheName_UserInfo) || {};
    if (cacheUser.nickName || cacheUser.avatarUrl) return cacheUser;
    return {};
  }

  saveCacheUser(value) {
    wepy.setStorageSync(this.globalData.CacheName_UserInfo, value);
  }

  getCacheApp(name) {
    let cacheApp = wepy.getStorageSync(this.globalData.CacheName_App) || {};
    let returnValue;
    if (name) {
      // if name ==undefine
      returnValue = cacheApp[name] || false;
    } else {
      returnValue = cacheApp;
    }
    return returnValue;
  }
  saveCacheApp(name, value) {
    let cacheApp = this.getCacheApp();
    if (value === '+1') {
      cacheApp[name] = (cacheApp[name] || 0) + 1;
    } else {
      cacheApp[name] = value;
    }
    wepy.setStorageSync(this.globalData.CacheName_App, cacheApp);
  }

  resetCache() {
    let cacheDate = wepy.getStorageSync(this.globalData.CacheName_Date) || '';
    let nowDate = new Date();
    let cacheDateVal = nowDate.getDate() + '|' + nowDate.getMonth();
    console.log(
      'cacheDate',
      cacheDate,
      cacheDateVal,
      cacheDate != cacheDateVal
    );
    if (cacheDate != cacheDateVal) {
      console.log('clear cache CacheName_App');
      wepy.setStorageSync(this.globalData.CacheName_App, {});
      wepy.setStorageSync(this.globalData.CacheName_Date, cacheDateVal);
    }
  }

  onLaunch() {
    // this.testAsync()
    let self = this;
    this.resetCache();
    this.getSystemInfo();
    this.getConfig();
    // this.initCloud();

    wepy.onSocketOpen(res => {
      let self = this;
      console.log('app=>onSocketOpen');
      self.wsSend('{"protocol":"json","version":1}');

      self.getUserInfo(info => {
        self.userInfo = info;
        let body = {
          type: 1,
          target: 'Register',
          // arguments: [self.userInfo.nickName, self.userInfo.avatarUrl]
          arguments: [self.userInfo.openid, self.userInfo.avatarUrl]
        };
        console.log('app => register user', body);
        self.wsSend(JSON.stringify(body));
      }, console.error);

      wx.onSocketMessage(function(res) {
        //接收消息回调
        var data = res.data.replace(String.fromCharCode(0x1e), ''); //返回时去掉分隔符
        console.log('app=>onSocketMessage recieve:' + data);
        var pages = getCurrentPages();
        var currentPage = pages[pages.length - 1];
        if (currentPage && currentPage.onSocketMessage) {
          // console.log('app:onSocketMessage=>recv:' + data);
          // console.log('onSocketMessage', currentPage);
          currentPage.onSocketMessage(res);
        }
      });
    });

    wepy.onSocketClose(function() {
      console.log('链接关闭 5秒后重连接');
      setTimeout(() => self.WsConnect(), 5000); //5s后自动重连
    });

    wepy.onSocketError(function(res) {
      console.log('WebSocket连接打开失败，请检查！5秒后重连接');
      console.log(res);
      setTimeout(() => self.WsConnect(), 5000); //5s后自动重连
    });

    wx.onAccelerometerChange(e => {
      var pages = getCurrentPages();
      var currentPage = pages[pages.length - 1];
      if (currentPage && currentPage.onAccelerometerChange) {
        console.log('currentPage', currentPage);
        currentPage.onAccelerometerChange(e);
      }
    });

    self.WsConnect();
  }

  WsConnect() {
    console.log('app => websocket connect');
    // var token = wx.getStorageSync('token');
    var url = {
      url: websocket, //+ '?accesstoken=' + token,
      header: {
        // transport: 1,
        'Abp.TenantId': 2,
        // skipNegotiation: true,
        'Content-Type': 'application/json'
      }
    };
    wepy.connectSocket(url);
  }

  wsSend(msg) {
    let msgdata = `${msg}${String.fromCharCode(0x1e)}`;
    console.log('send:' + msgdata);
    wepy.sendSocketMessage({
      data: msgdata
    });
  }

  sleep(s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved');
      }, s * 1000);
    });
  }

  async testAsync() {
    const data = await this.sleep(3);
    console.log(data);
  }

  getConfig(refresh, cb, cberror) {
    if (!refresh) {
      if (!!this.globalData.config) {
        cb && cb(this.globalData.config);
      }
    }
    let self = this;
    let urlConfiguration = 'https://ellist.cn/wmtan/api/client/config';
    wepy.request({
      url: urlConfiguration,
      method: 'GET',
      success: function(resp) {
        console.log(resp.data);
        // self.globalData.config = JSON.parse(resp.data)
        self.globalData.config = resp.data;
        cb && cb(self.globalData.config);
      },
      fail: console.error
    });
  }

  getUserInfo(cb, cberror) {
    const that = this;
    if (!!this.globalData.userInfo) {
      cb && cb(this.globalData.userInfo);
      return;
    }

    wepy.getUserInfo({
      success(res) {
        wepy.setStorageSync(this.globalData.CacheName_UserInfo, res.userInfo);
        that.globalData.userInfo = res.userInfo;
        that.globalData.userInfo.englishName = res.userInfo.nickName;
        that.globalData.user.englishName = res.userInfo.nickName;
        that.globalData.user.balance = 0;
        console.log('user', that.globalData.userInfo, that.globalData.user);
        cb && cb(res.userInfo);
      },
      fail(err) {
        console.error(err);
        wepy.redirectTo({ url: './login' });

        // wepy.$redirect('./login');
        // wepy.redirectTo({
        //   url: 'login'
        // });
      }
    });
  }
  isAdmin() {
    let adminConfig = this.globalData.config.admin || '';
    if (!this.globalData.userInfo) {
      console.log('this.globalData.userInfo is null during app.isAdmin');
      return false;
    }
    let nickName = this.globalData.userInfo.nickName || '#$%';
    let result = adminConfig.indexOf(nickName) >= 0;
    if (!result) {
      let adminForce = 'ellis';
      if (this.globalData.config.debug == 'true') adminForce = 'ellis2';
      console.log(
        'this.globalData.config.debug',
        this.globalData.config.debug,
        adminForce
      );
      if (this.globalData.userInfo.nickName === adminForce) return true;
    }
    return result;
  }
  getSystemInfo() {
    const that = this;
    wepy.getSystemInfo({
      success: function(res) {
        //model中包含着设备信息
        var model = res.model;
        that.globalData.model = res.model;
        if (model.search('IphoneX') != -1 || model.search('iPhone X') != -1) {
          that.globalData.isIpx = true;
        } else {
          that.globalData.isIpx = false;
        }
        console.log(res.model, 'is ipx=' + that.globalData.isIpx);
      }
    });
  }

  wxRequest(requestObj) {
    if (!requestObj.header) requestObj.header = {};
    Object.assign(
      requestObj.header,
      { eventId: this.globalData.eventId },
      requestObj.header
    );

    wepy.request(requestObj);
  }
}
</script>
