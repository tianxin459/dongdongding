<style lang="less">
.userinfo {
  display: flex;
  flex-direction: row;
  /* background-color: #3e8bf8; */
  image {
    height: 50rpx;
    width: 50rpx;
    border-radius: 50%;
    margin-right: 5rpx;
  }
}

.listBoard {
  border: 1px solid gold;
}

.balance-container {
  width: 500rpx;
  height: 500rpx;
  align-self: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  .text {
    position: absolute;
    align-self: center;
    font-size: 150rpx;
    text-shadow: var(--colorGrey) 3px 3px 3px;
    .unit {
      font-size: 40rpx;
    }
  }
  wux-circle {
    text-align: center;
  }
}
.message {
  width: 100%;
}

.balance-bar {
  background-color: var(--colorGreenGD);
  color: white;
  width: 100%;
  font-weight: 900;
  // height:20vh;
  .text {
    padding: 10rpx 50rpx;
  }
  .balance {
    font-size: 200rpx;
    padding: 0rpx 100rpx;
    text-shadow: var(--colorGrey) 3px 3px 3px;
  }
  .unit {
    font-size: 40rpx;
    margin-left: 20rpx;
  }
}

.functionList{
  width:100%;
  scroll-behavior:auto;

}

.btn2 {
  display: flex;
  flex-direction: column;
  p{
    font-size: 40rpx;
    font-weight: 300;
  }
}
</style>

<template>
  <view class="container">
    <header></header>
    <!-- <view class="header">
      <wux-wing-blank size="default">
        <view><span class="color-outline">G</span>reen<span class="color-outline">D</span>ot SH <span>2019</span></view>
        <wux-row>
            <wux-col span="2" offset="10">
              <view class="userinfo">
                <image class="userinfo-avatar" src="{{userInfo.avatarUrl}}"></image>
                <p class="user-name">{{userInfo.nickName}}</p>
              </view>
            </wux-col>
        </wux-row>
      </wux-wing-blank>
    </view> -->
    <view class="body">
      <view class="message">
        <wux-notice-bar  loop speed="100" content="{{msg}}" />
      </view>
      <view class="balance-bar">
        <view class="text">
          Your Balance
        </view>

        <view class="balance">
          {{balance}}<span class="unit">G</span>
        </view>
      </view>
      <view class="functionList">
        <wux-cell-group>
            <wux-cell title="History" is-link label="Transaction History" url="./transactionHistory" ></wux-cell>
            <wux-cell title="Send Message" is-link label="Send to Bullet Screen" disabled="true"></wux-cell>
            <!--<wux-cell title="只显示箭头" is-link url="./qrcode" ></wux-cell>
            <wux-cell title="跳转到首页" is-link url="/pages/qrcode" open-type="switchTab"></wux-cell> -->
        </wux-cell-group>
      </view>
      <!-- <view class="balance-container">
        <wux-circle class="percentRing" percent="{{ percent }}"></wux-circle>
        <view class="text">
          <p>{{balance}}<span class="unit">G</span></p>
        </view>
      </view> -->
      <view class="listBoard">

      </view>
    </view>

    <view class="footer {{isIPX?'isIPX':''}}">
      <wux-wing-blank size="large">
        <wux-row>
          <wux-col span="6">
            <wux-wing-blank size="large">
              <wux-button block clear type="balanced" @tap="payMoney">
                <view class="btn2">
                  <wux-icon type="ios-qr-scanner" size="64" />
                  <view>Scan</view>
                </view>
              </wux-button>
            </wux-wing-blank>
          </wux-col>
          <wux-col span="6">
           <wux-wing-blank size="large">
              <wux-button block clear type="balanced" @tap="myQRCode">
                <view class="btn2">
                  <wux-icon type="ios-barcode" size="64" />
                  <view>QRCode</view>
                </view>
              </wux-button>
            </wux-wing-blank>
          </wux-col>
        </wux-row>

      </wux-wing-blank>
    </view>

    <!--------------------wux bottom btns-------------------->
    <!-- <wux-tabbar class="bottomTab {{isIPX?'isIPXTab':''}}" default-current="1" position="bottom" theme="balanced">
            <wux-tabbar-item class="bigTab" title="Scan" @tap='payMoney'>
                    <wux-icon wux-class="icon" type="ios-qr-scanner" size="30" slot="icon-on"/>
                    <wux-icon wux-class="icon" type="ios-qr-scanner" size="30" slot="icon-off"/>
            </wux-tabbar-item>
            <wux-tabbar-item title="Collect" @tap='myQRCode'>
                    <wux-icon wux-class="icon" type="ios-barcode" size="30"  dot slot="icon-on"/>
                    <wux-icon wux-class="icon" type="ios-code-download" size="30"  dot slot="icon-off"/>
            </wux-tabbar-item>
            <wux-tabbar-item title="Transactions">
                <wux-icon wux-class="icon" type="ios-paper" size="30" slot="icon-on" />
                <wux-icon wux-class="icon" type="ios-paper" size="30" slot="icon-off" />
            </wux-tabbar-item>
        </wux-tabbar> -->

    <!--------------------hidden part-------------------->
    <!-- <wux-animation-group wux-class="" duration="1000" in="{{ showQRCode }}" enter="{{ qrCode.enter }}" exit="{{ qrCode.exit }}" class-names="{{ qrCode.classNames }}" >
          <view class="qrCode-container">
            <view class="qrCode-frame">
              <view class="userinfo">
                <image class="userinfo-avatar" src="{{userInfo.avatarUrl}}"></image>
                <p class="user-name">{{userInfo.nickName}}</p>
              </view>
              <view class="qrCode">
                <wux-qrcode data="{{ qrCodeData }}" fg-color="#485860" width="200" height="200"/>
              </view>
            </view>
          </view>
        </wux-animation-group> -->
  </view>
</template>
<script>
import wepy from 'wepy';
import Header from '@/components/header';
// import { $wuxBackdrop } from '../wux/index'
let balanceI;
let notificationI;
let urlNotification = 'https://wtf.chinacloudsites.cn/api/notification';

export default class Index2 extends wepy.page {
  components = {
    header: Header
  };
  config = {
    usingComponents: {
      'wux-button': '../wux/button/index',
      'wux-icon': '../wux/icon/index',
      // 'wux-tabbar': '../wux/tabbar/index',
      // 'wux-tabbar-item': '../wux/tabbar-item/index',
      'wux-wing-blank': '../wux/wing-blank/index',
      'wux-white-space': '../wux/white-space/index',
      'wux-row': '../wux/row/index',
      'wux-col': '../wux/col/index',
      // 'wux-qrcode': '../wux/qrcode/index',
      // 'wux-grids': '../wux/grids/index',
      // 'wux-grid': '../wux/grid/index',
      // 'wux-animation-group': '../wux/animation-group/index',
      // 'wux-backdrop': '../wux/backdrop/index',
      'wux-notice-bar': '../wux/notice-bar/index',
      // 'wux-circle': '../wux/circle/index',
      "wux-cell-group": "../wux/cell-group/index",
      "wux-cell": "../wux/cell/index"
    }
  };
  components = {};
  data = {
    userInfo: {},
    qrCodeUrl: '.',
    qrCodeData: 'no data',
    qrCodeColor: '#1ab16c',
    // qrCodeColor:"#1ab16c",
    qrCode: {
      classNames: 'wux-animate--fadeIn',
      enter: true,
      exit: true,
      in: false
    },
    balance: 10,
    showQRCode: false,
    msg: '---',
    isIPX: false,
    percent: 70
  };
  methods = {
    onClick() {
      console.log('on click');
      this.msg = '666';
    },
    myQRCode() {
      var self = this;
      self.$redirect('./qrcode');
      // this.$parent.getUserInfo(info => {
      //   console.log('user info get');
      //   self.$redirect('./qrcode');
      // });
      // console.log(this.showQRCode);
      // // this.$wuxBackdrop.retain();
      // this.showQRCode = !this.showQRCode;
    },
    payMoney() {
      return;
      var self = this;
      wepy.scanCode({
        success: function(resp) {
          console.log(resp.result);
          self.msg = resp.result;
          if (self.msg == 'no') self.$apply();
          self.$navigate('./transfer', JSON.parse(resp.result));
        },
        fail: function(err) {
          console.error('err');
          console.error('err', err);
        }
      });
    }
  };
getNotification = () => {
    var self = this;
    var url = urlNotification;
    wepy.request({
      url: url,
      method: 'GET',
      success: function(resp) {
        console.log('notificationContent',resp.data.item.notificationContent);
        self.msg = resp.data.item.notificationContent;
        self.$apply();
      },
      fail: function(err) {
        self.$redirect('./transfer-fail');
      }
    });
  };
  getInfo = () => {
    var self = this;

        if(this.$parent.globalData.isDebug)
        {
          console.log(self.$parent.globalData.user.balance);
          self.balance = self.$parent.globalData.user.balance;
          self.$apply();
          return;
        }

    var url = 'https://httpbin.org/anything/10';
    wepy.request({
      url: url,
      method: 'GET',
      success: function(resp) {
        console.log(self.$parent.globalData.user.balance++);
        let balance = self.$parent.globalData.user.balance;
        self.balance = balance % 10;
        self.percent = self.balance * 10;
        if(self.msg!=resp)
        {
          self.msg = resp;
        }
        self.$apply();
      },
      fail: function(err) {
        self.$redirect('./transfer-fail');
      }
    });
  };
  onLoad() {
    var self = this;
    self.isIPX = this.$parent.globalData.isIpx;
    console.log(this.$parent.globalData.isIpx);
    this.$parent.getUserInfo(info => {
      self.userInfo = info;
      self.msg = 'here will display public notice information: blah...blah...blah...';
      self.qrCodeUrl = self.$parent.globalData.qrCodeUrl + info.nickName;
      var { nickName, avatarUrl } = self.userInfo;
      var qrdata = { nickName, avatarUrl };
      self.qrCodeData = JSON.stringify(qrdata);
      console.log(self.qrCodeData);
      console.log(JSON.parse(self.qrCodeData));
      self.$apply();
    });
    this.getInfo();
    this.getNotification();
  }

  onShow() {
    // balanceI = setInterval(this.getInfo,3000);
    // notificationI = setInterval(this.getNotification, 5000)
  }
  onHide() {
    console.log('onhide');
    clearInterval(balanceI);
    clearInterval(notificationI);
  }
  onUnload() {
    console.log('onUnload');
    clearInterval(balanceI);
    clearInterval(notificationI);
  }
}
</script>
